<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="PendingGaurantee_Main01_inprog">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="duration" elementType="Argument">
            <stringProp name="Argument.name">duration</stringProp>
            <stringProp name="Argument.value">600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="setupDone" elementType="Argument">
            <stringProp name="Argument.name">setupDone</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="stopDone" elementType="Argument">
            <stringProp name="Argument.name">stopDone</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nrThreads" elementType="Argument">
            <stringProp name="Argument.name">nrThreads</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sampleAtSecond" elementType="Argument">
            <stringProp name="Argument.name">sampleAtSecond</stringProp>
            <stringProp name="Argument.value">50</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Destination2" elementType="Argument">
            <stringProp name="Argument.name">Destination2</stringProp>
            <stringProp name="Argument.value">RPRAT05SQPGQ</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Destination" elementType="Argument">
            <stringProp name="Argument.name">Destination</stringProp>
            <stringProp name="Argument.value">DPRAT05SQPGQ</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="duration" elementType="Argument">
            <stringProp name="Argument.name">duration</stringProp>
            <stringProp name="Argument.value">3600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sleeptimer" elementType="Argument">
            <stringProp name="Argument.name">sleeptimer</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="MQ1 Thread Group_SetUp" enabled="false">
        <intProp name="ThreadGroup.num_threads">8</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Channel1-DPRAT05CCPPG1" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG2&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + 15_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(40)

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG1" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG1&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG1 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
    log.info(&quot;the channel name is&quot; + ${})
    log.info(&quot;the HostName is&quot; +${})
    log.info(&quot;the PortNum is &quot;+${})
    log.info(&quot;the InputQueue is &quot;+${})
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG2" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG2&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG2 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG3" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG3&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG3 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG4" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG4&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG4 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG5" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG5&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG5 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG6" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG6&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG6 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG7" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG7&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG7 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG8" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG8&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG8 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG9" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG9&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG9 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG10" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG10&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG10 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG11" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG11&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG11 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG12" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG12&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG12 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ1" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG1&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ1 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ2" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG2&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ2 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ3" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG3&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ3 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ4" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG4&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ4 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ5" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG5&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ5 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ6" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG6&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ6 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ7" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG7&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ7 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ8" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG8&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ8 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ9" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG9&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ9 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ10" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG10&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ10 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ11" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG11&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ11 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ12" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG12&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ12 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SendRequest - MQ1" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant
import java.nio.file.StandardOpenOption

// Ensure MQ client libraries are available
log.info(&quot;Starting IBM MQ message producer script&quot;)

// Initialize MQ connection and session
MQQueueConnectionFactory factory = new MQQueueConnectionFactory();

def connection = null
def session = null
def producer = null

try {
    // Set up the MQ connection factory (Make sure you replace these with the actual values)
    factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
    factory.setPort(2026)  					    // Replace with your MQ port (default is 1414)
    factory.setChannel(&quot;DPRAT05CCPPG12&quot;)  	         // Replace with your channel name
    factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
    factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP);  // Ensure client mode (TCP/IP)

    // Establish the connection and session
    log.info(&quot;Creating Connection&quot;)
    connection = factory.createQueueConnection()
    log.info(&quot;Connection Created&quot;)
    log.info(&quot;Creating Session&quot;)
    session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
    log.info(&quot;Session Created&quot; + session)

    // Start the connection
    connection.start()

    // Retrieve the destination queue from JMeter variables
    def destinationQueueName = vars.get(&quot;Destination&quot;)  // Get the Destination variable from JMeter
    log.info(&quot;Destination is: &quot; + destinationQueueName)

    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    // Create the destination queue object
    Queue destination = session.createQueue(destinationQueueName)
	 log.info(&quot;Destination Created: &quot; + destination)
	 
    // Create a message producer for the destination queue
    producer = session.createProducer(destination)
     log.info(&quot;Producer Created: &quot; + producer)

	      // Generate the 17-digit unique ID
	Random random = new Random()
	
	// Generate a random long number in the range of 10,000,000,000 to 99,999,999,999
	def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L  // 11 digits
	log.info(&quot;firstRandomNum: &quot; + firstRandomNum)
	
	// Generate a random number between 1000 and 9999 for the 4-digit part
	def secondRandomNum = 100000 + random.nextInt(900000) // 4 digits
	log.info(&quot;secondRandomNumD: &quot; + secondRandomNum)
	
	def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)  // Combine to make a 17-digit unique ID
	log.info(&quot;Generated 17-digit unique ID1: &quot; + uniqueId1)


   // Define the XML request string with escaped double quotes
		def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;
    
    log.info(&quot;XML request prepared successfully&quot;)

    // Create a text message with the XML content
    TextMessage message = session.createTextMessage(xmlRequest)

    // Measure the time for sending the message
    def start = Instant.now()

    // Send the message to the queue
    producer.send(message)
    log.info(&quot;Message sent successfully to the queue: &quot; + destinationQueueName)

    // Stop timing
    def stop = Instant.now()

    // Set response data for JMeter result
    SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)  
    SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
    SampleResult.setLatency(stop.toEpochMilli() - start.toEpochMilli())
    log.info(&quot;Message sent successfully with latency: &quot; + (stop.toEpochMilli() - start.toEpochMilli()) + &quot; ms&quot;)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e  // Re-throw exception to make it visible in JMeter if needed
} finally {
    // Ensure the producer and connection are closed in case of any failure
    try {
        if (producer != null) producer.close()
        if (session != null) session.close()
        if (connection != null) connection.close()
        log.info(&quot;MQ resources closed successfully&quot;)
    } catch (Exception e) {
        log.error(&quot;An error occurred while closing MQ resources: &quot; + e.getMessage(), e)
    }
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SendRequest - MQ2" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant
import java.nio.file.StandardOpenOption

// Ensure MQ client libraries are available
log.info(&quot;Starting IBM MQ message producer script&quot;)

// Initialize MQ connection and session
MQQueueConnectionFactory factory = new MQQueueConnectionFactory();

def connection = null
def session = null
def producer = null

try {
    // Set up the MQ connection factory (Make sure you replace these with the actual values)
    factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
    factory.setPort(2029)  					    // Replace with your MQ port (default is 1414)
    factory.setChannel(&quot;RPRAT05CCPPG11&quot;)  	         // Replace with your channel name
    factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
    factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP);  // Ensure client mode (TCP/IP)

    // Establish the connection and session
    log.info(&quot;Creating Connection&quot;)
    connection = factory.createQueueConnection()
    log.info(&quot;Connection Created&quot;)
    log.info(&quot;Creating Session&quot;)
    session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
    log.info(&quot;Session Created&quot; + session)

    // Start the connection
    connection.start()

    // Retrieve the destination queue from JMeter variables
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)  // Get the Destination variable from JMeter
    log.info(&quot;Destination is: &quot; + destinationQueueName2)

    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    // Create the destination queue object
    Queue destination2 = session.createQueue(destinationQueueName2)
	 log.info(&quot;Destination Created: &quot; + destination2)
	 
    // Create a message producer for the destination queue
    producer = session.createProducer(destination2)
     log.info(&quot;Producer Created: &quot; + producer)

	      // Generate the 17-digit unique ID
	Random random = new Random()
	
	// Generate a random long number in the range of 10,000,000,000 to 99,999,999,999
	def firstRandomNum = 10_010_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L  // 11 digits
	log.info(&quot;firstRandomNum: &quot; + firstRandomNum)
	
	// Generate a random number between 1000 and 9999 for the 4-digit part
	def secondRandomNum = 100100 + random.nextInt(900000) // 4 digits
	log.info(&quot;secondRandomNumD: &quot; + secondRandomNum)
	
	def uniqueId2 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)  // Combine to make a 17-digit unique ID
	log.info(&quot;Generated 17-digit unique ID2: &quot; + uniqueId2)


    // Define the XML request string
     // Define the XML request string with escaped double quotes
def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId2}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
  &quot;&lt;PanOrDom/&gt;\n&quot; +
  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
  &quot;&lt;VersionData&gt;\n&quot; +
    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
  &quot;&lt;/VersionData&gt;\n&quot; +
  &quot;&lt;ExternalCharges&gt;\n&quot; +
    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
    &quot;&lt;/Charge&gt;\n&quot; +
    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
    &quot;&lt;/Charge&gt;\n&quot; +
    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
    &quot;&lt;/Charge&gt;\n&quot; +
    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
    &quot;&lt;/Charge&gt;\n&quot; +
    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
    &quot;&lt;/Charge&gt;\n&quot; +
    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
    &quot;&lt;/Charge&gt;\n&quot; +
    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
    &quot;&lt;/Charge&gt;\n&quot; +
  &quot;&lt;/ExternalCharges&gt;\n&quot; +
  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
&quot;&lt;/PendingGuarantee&gt;&quot;
    
    log.info(&quot;XML request prepared successfully&quot;)

    // Create a text message with the XML content
    TextMessage message = session.createTextMessage(xmlRequest)

    // Measure the time for sending the message
    def start = Instant.now()

    // Send the message to the queue
    producer.send(message)
    log.info(&quot;Message sent successfully to the queue: &quot; + destinationQueueName2)

    // Stop timing
    def stop = Instant.now()

    // Set response data for JMeter result
    SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
    SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
    SampleResult.setLatency(stop.toEpochMilli() - start.toEpochMilli())
    log.info(&quot;Message sent successfully with latency: &quot; + (stop.toEpochMilli() - start.toEpochMilli()) + &quot; ms&quot;)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e  // Re-throw exception to make it visible in JMeter if needed
} finally {
    // Ensure the producer and connection are closed in case of any failure
    try {
        if (producer != null) producer.close()
        if (session != null) session.close()
        if (connection != null) connection.close()
        log.info(&quot;MQ resources closed successfully&quot;)
    } catch (Exception e) {
        log.error(&quot;An error occurred while closing MQ resources: &quot; + e.getMessage(), e)
    }
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
          <stringProp name="IfController.condition">&quot;${setupDone}&quot;==&quot;false&quot;;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree/>
        <PublisherSampler guiclass="JMSPublisherGui" testclass="PublisherSampler" testname="JMS Publisher" enabled="false">
          <stringProp name="jms.jndi_properties">false</stringProp>
          <stringProp name="jms.initial_context_factory"></stringProp>
          <stringProp name="jms.provider_url"></stringProp>
          <stringProp name="jms.connection_factory"></stringProp>
          <stringProp name="jms.topic"></stringProp>
          <stringProp name="jms.expiration"></stringProp>
          <stringProp name="jms_error_reconnect_on_codes"></stringProp>
          <stringProp name="jms.priority"></stringProp>
          <stringProp name="jms.security_principle"></stringProp>
          <stringProp name="jms.security_credentials"></stringProp>
          <stringProp name="jms.text_message"></stringProp>
          <stringProp name="jms.input_file"></stringProp>
          <stringProp name="jms.random_path"></stringProp>
          <stringProp name="jms.config_choice">jms_use_file</stringProp>
          <stringProp name="jms.config_msg_type">jms_text_message</stringProp>
          <stringProp name="jms.iterations">1</stringProp>
          <boolProp name="jms.authenticate">false</boolProp>
          <elementProp name="jms.jmsProperties" elementType="JMSProperties">
            <collectionProp name="JMSProperties.properties"/>
          </elementProp>
        </PublisherSampler>
        <hashTree/>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="false">
          <intProp name="ThroughputController.style">0</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1000</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>1.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MQ1 Thread Group">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">50</intProp>
        <intProp name="ThreadGroup.ramp_time">600</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG1">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG1&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG1 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
    log.info(&quot;the channel name is&quot; + ${})
    log.info(&quot;the HostName is&quot; +${})
    log.info(&quot;the PortNum is &quot;+${})
    log.info(&quot;the InputQueue is &quot;+${})
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group2" enabled="true">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">50</intProp>
        <intProp name="ThreadGroup.ramp_time">600</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG2" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG2&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG2 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group3" enabled="true">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">50</intProp>
        <intProp name="ThreadGroup.ramp_time">600</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG3" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG3&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG3 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group4" enabled="true">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">50</intProp>
        <intProp name="ThreadGroup.ramp_time">600</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG4" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG4&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG4 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group5" enabled="true">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">50</intProp>
        <intProp name="ThreadGroup.ramp_time">600</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG5" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG5&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG5 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group6" enabled="true">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">50</intProp>
        <intProp name="ThreadGroup.ramp_time">600</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG6" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG6&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG6 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group7" enabled="true">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">50</intProp>
        <intProp name="ThreadGroup.ramp_time">600</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG7" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG7&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG7 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group8" enabled="true">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">50</intProp>
        <intProp name="ThreadGroup.ramp_time">600</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG8" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG8&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG8 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group9" enabled="true">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">50</intProp>
        <intProp name="ThreadGroup.ramp_time">600</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG9" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG9&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG9 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group10">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">50</intProp>
        <intProp name="ThreadGroup.ramp_time">600</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG10" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG10&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG10 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group11" enabled="false">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">12</intProp>
        <intProp name="ThreadGroup.ramp_time">300</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG11" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG11&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG11 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group12" enabled="false">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">12</intProp>
        <intProp name="ThreadGroup.ramp_time">300</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue1- DPRAT05CCPPG12" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper01.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2026)                           // Replace with your MQ port
        factory.setChannel(&quot;DPRAT05CCPPG12&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSDCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName = vars.get(&quot;Destination&quot;)
    if (destinationQueueName == null || destinationQueueName.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination = session.createQueue(destinationQueueName)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName} on channel: DPRAT05CCPPG12 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MQ2 Thread Group">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">50</intProp>
        <intProp name="ThreadGroup.ramp_time">600</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ1">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG1&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ1 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group2" enabled="true">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">50</intProp>
        <intProp name="ThreadGroup.ramp_time">600</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ2">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG2&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ2 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group3" enabled="true">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">50</intProp>
        <intProp name="ThreadGroup.ramp_time">600</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ3">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG3&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ3 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group4" enabled="true">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">50</intProp>
        <intProp name="ThreadGroup.ramp_time">600</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ4" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG4&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ4 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group5" enabled="true">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">50</intProp>
        <intProp name="ThreadGroup.ramp_time">600</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ5" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG5&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ5 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group6" enabled="true">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">50</intProp>
        <intProp name="ThreadGroup.ramp_time">600</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ6" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG6&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ6 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group7" enabled="true">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">50</intProp>
        <intProp name="ThreadGroup.ramp_time">600</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ7" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG7&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ7 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group8" enabled="true">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">50</intProp>
        <intProp name="ThreadGroup.ramp_time">600</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ8" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG8&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ8 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group9" enabled="true">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">50</intProp>
        <intProp name="ThreadGroup.ramp_time">600</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ9" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG9&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ9 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group10">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">50</intProp>
        <intProp name="ThreadGroup.ramp_time">600</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ10" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG10&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ10 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group11" enabled="false">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">12</intProp>
        <intProp name="ThreadGroup.ramp_time">300</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ11" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG11&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ11 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group12" enabled="false">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">12</intProp>
        <intProp name="ThreadGroup.ramp_time">300</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InputQueue2- RPRAT05SQPGQ12" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session
import javax.jms.MessageProducer
import javax.jms.TextMessage
import javax.jms.Queue
import java.time.Instant

// Thread-local storage to ensure each thread has its own connection and session
ThreadLocal&lt;javax.jms.QueueConnection&gt; threadConnection = new ThreadLocal&lt;&gt;()
ThreadLocal&lt;javax.jms.QueueSession&gt; threadSession = new ThreadLocal&lt;&gt;()

try {
    // Initialize connection and session only once per thread
    if (threadConnection.get() == null || threadSession.get() == null) {
        MQQueueConnectionFactory factory = new MQQueueConnectionFactory()
        
        // Set up the MQ connection factory
        factory.setHostName(&quot;hanvlasdper02.hertz.net&quot;)  // Replace with your MQ hostname
        factory.setPort(2029)                           // Replace with your MQ port
        factory.setChannel(&quot;RPRAT05CCPPG12&quot;)              // Fixed channel name
        factory.setQueueManager(&quot;AWSRCMQPRAT05&quot;)        // Replace with your queue manager name
        factory.setTransportType(com.ibm.mq.jms.JMSC.MQJMS_TP_CLIENT_MQ_TCPIP)  // Client mode (TCP/IP)

        // Create and store the connection and session for the current thread
        log.info(&quot;Creating Connection&quot;)
        def connection = factory.createQueueConnection()
        log.info(&quot;Connection Created&quot;)
        
        log.info(&quot;Creating Session&quot;)
        def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)
        log.info(&quot;Session Created&quot; + session)
        
        connection.start()
        
        threadConnection.set(connection)
        threadSession.set(session)
        
        log.info(&quot;Connection and session initialized for thread: ${Thread.currentThread().getName()}&quot;)
    }

    // Retrieve the session and connection from ThreadLocal storage
    def connection = threadConnection.get()
    def session = threadSession.get()

    // Destination queue setup
    def destinationQueueName2 = vars.get(&quot;Destination2&quot;)
    if (destinationQueueName2 == null || destinationQueueName2.isEmpty()) {
        throw new IllegalStateException(&quot;Destination queue name is not set&quot;)
    }

    Queue destination2 = session.createQueue(destinationQueueName2)

    // Calculate the end time for the loop (15 minutes or 900 seconds from start)
    def startTime = System.currentTimeMillis()
    def endTime = startTime + ${duration}_000  // 900 seconds in milliseconds

    do {
        // Generate unique ID
        Random random = new Random()
        def firstRandomNum = 10_000_000_000L + Math.abs(random.nextLong()) % 90_000_000_000L
        def secondRandomNum = 100000 + random.nextInt(900000)
        def uniqueId1 = String.valueOf(firstRandomNum) + String.format(&quot;%04d&quot;, secondRandomNum)
        log.info(&quot;Generated 17-digit unique ID: &quot; + uniqueId1)

        // XML request content
        def xmlRequest = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		  &quot;&lt;PendingGuarantee id=\&quot;${uniqueId1}\&quot; origin=\&quot;Res\&quot;&gt;\n&quot; +
		  &quot;&lt;QuoteDateTime sysdate=\&quot;19957\&quot; time=\&quot;16:30:45\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupLocation internalNumber=\&quot;390\&quot; country=\&quot;US\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffLocation internalNumber=\&quot;390\&quot;/&gt;\n&quot; +
		  &quot;&lt;PickupDateTime sysdate=\&quot;19584\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;DropoffDateTime sysdate=\&quot;19585\&quot; time=\&quot;12:00\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanIDs id=\&quot;VCPD1\&quot; type=\&quot;NP\&quot; family=\&quot;TP\&quot; category=\&quot;P\&quot; classification=\&quot;DY\&quot;/&gt;\n&quot; +
		  &quot;&lt;LengthOfKeep start=\&quot;1\&quot; end=\&quot;2\&quot;/&gt;\n&quot; +
		  &quot;&lt;Vehicle code=\&quot;A\&quot;/&gt;\n&quot; +
		  &quot;&lt;Contract parentID=\&quot;000263170000\&quot;/&gt;\n&quot; +
		  &quot;&lt;PanOrDom/&gt;\n&quot; +
		  &quot;&lt;PlanTypeChosen type=\&quot;U\&quot;/&gt;\n&quot; +
		  &quot;&lt;GuarExchangeRate/&gt;\n&quot; +
		  &quot;&lt;PMABaseRate value=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;BasePeriodCharges&gt;\n&quot; +
		    &quot;&lt;RateAmount amount=\&quot;98.93\&quot;/&gt;\n&quot; +
		    &quot;&lt;LengthOfRClass value=\&quot;1\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateFactor amount=\&quot;1.000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhDivisor amount=\&quot;2.94084423306\&quot;/&gt;\n&quot; +
		    &quot;&lt;ExHhExDyDivisor amount=\&quot;0.00000000000\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransDays value=\&quot;0\&quot;/&gt;\n&quot; +
		    &quot;&lt;TransValue amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		    &quot;&lt;RateClassTimeID value=\&quot;DY\&quot;/&gt;\n&quot; +
		    &quot;&lt;PudoExDayAmount amount=\&quot;0.00\&quot;/&gt;\n&quot; +
		  &quot;&lt;/BasePeriodCharges&gt;\n&quot; +
		  &quot;&lt;VersionData&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;ICAdjustGrp\&quot; seq=\&quot;1000088617\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;Plan\&quot; seq=\&quot;666757406167\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlace\&quot; seq=\&quot;228372036214\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;PlanPlaceDateSpan\&quot; seq=\&quot;1071473248829\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateUID\&quot; seq=\&quot;1071473248832\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateProductMap\&quot; seq=\&quot;1071473248839\&quot;/&gt;\n&quot; +
		    &quot;&lt;Version name=\&quot;RateDetail\&quot; seq=\&quot;1071473248858\&quot;/&gt;\n&quot; +
		  &quot;&lt;/VersionData&gt;\n&quot; +
		  &quot;&lt;ExternalCharges&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PPI\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;6.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;VLF\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;M\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;0.39\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXDYS\&quot; value=\&quot;999\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;RSMDYS\&quot; value=\&quot;9999\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LSC\&quot; applMethod=\&quot;PCT\&quot; inclIndicator=\&quot;Y\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;PCTRT\&quot; value=\&quot;0.11110\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;AGE\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LDW\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;LIS\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PER\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;PPI\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TIF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;TNM\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;APPLYTO\&quot; value=\&quot;VLF\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LDW\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;29.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;AGE\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;W\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;27.00\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.98\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MINAGE\&quot; value=\&quot;20\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXAGE\&quot; value=\&quot;24\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;LIS\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;13.95\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		    &quot;&lt;Charge chargeType=\&quot;PER\&quot; applMethod=\&quot;PRD\&quot; inclIndicator=\&quot;O\&quot;&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;DY\&quot; value=\&quot;8.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;MAXRT\&quot; value=\&quot;999999999.99\&quot;/&gt;\n&quot; +
		      &quot;&lt;ChargeAttr name=\&quot;CHARGE_CLASS\&quot; value=\&quot;GDD\&quot;/&gt;\n&quot; +
		    &quot;&lt;/Charge&gt;\n&quot; +
		  &quot;&lt;/ExternalCharges&gt;\n&quot; +
		  &quot;&lt;OptionalityTypeIDList value=\&quot;SRC~ANS~PPI~TRF~TAX~GPS~SNG~KRS~VLF~P24~WTR~SNO~LSC~LDW~AGE~SDT~BST~ESP~TUF~CST~SDW~AAO~TP-~REF~P2T~TAB~WIF~LIS~UMP~PER~NEV~SKV\&quot;/&gt;\n&quot; +
		  &quot;&lt;OptionalityIndList value=\&quot;O~O~O~M~M~O~O~O~M~O~O~O~Y~O~W~M~O~O~M~O~O~W~O~O~O~O~O~O~O~O~O~O\&quot;/&gt;\n&quot; +
		  &quot;&lt;PlanRuleIds&gt;a4f5eec1833b855e79b27fc8f9e048b3d83ed1c7&lt;/PlanRuleIds&gt;\n&quot; +
	&quot;&lt;/PendingGuarantee&gt;&quot;  // Add full XML here

        // Create a new producer for each message and close it afterward
        MessageProducer producer = session.createProducer(destination2)
        TextMessage message = session.createTextMessage(xmlRequest)

        // Measure time taken for sending
        def sendStartTime = Instant.now()
        producer.send(message)
        def sendEndTime = Instant.now()
        
        log.info(&quot;Message sent to queue: ${destinationQueueName2} on channel: RPRAT05SQPGQ12 with latency: ${sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli()} ms&quot;)

        // Set response data for JMeter
        SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;)
        SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
        SampleResult.setLatency(sendEndTime.toEpochMilli() - sendStartTime.toEpochMilli())

        // Close producer after sending the message
        producer.close()

        // Wait 40ms before the next message
        Thread.sleep(${sleeptimer})

    } while (System.currentTimeMillis() &lt; endTime)

} catch (Exception e) {
    log.error(&quot;An error occurred during MQ message processing: &quot; + e.getMessage(), e)
    throw e
} finally {
    // Cleanup: close connection and session for each thread at the end of the test
    if (threadSession.get() != null) {
        threadSession.get().close()
        threadSession.remove()
    }
    if (threadConnection.get() != null) {
        threadConnection.get().close()
        threadConnection.remove()
    }
    log.info(&quot;Connection and session closed for thread: ${Thread.currentThread().getName()}&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </PostThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${stopDone}&quot;==&quot;false&quot;;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Stop" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">System.getProperties().get(&quot;Session&quot;).close();
System.getProperties().get(&quot;Connection&quot;).close();

log.info(&quot;#### Stop completed!&quot;);
vars.put(&quot;stopDone&quot;,&quot;true&quot;);
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Producer" enabled="false">
        <stringProp name="ThreadGroup.num_threads">${nrThreads}</stringProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__jexl2(${sampleAtSecond}*60)}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.time.Instant
def sess=System.getProperties().get(&quot;Session&quot;)
def destination=System.getProperties().get(&quot;Destination&quot;)
def producer=sess.createProducer(destination)
def rnd=newRandom(System.currentTimeMillis())
def payload=String.format(&quot;JMeter...IBM MQ...test message no. %09d!&quot;,rnd.nextInt(Integer.MAX_VALUE))
def msg=sess.createTextMessage(payload)

def start=Instant.now()
producer.send(msg)

def stop=Instant.now()
producer.close()

SampleResult.setResponseData(msg.toString()) 
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT)
SampleResult.setLatency(stop.toEpochMilli()-start.toEpochMilli())</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - original" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.time.Instant;
import org.apache.jmeter.util.JMeterUtils;
import java.nio.file.Files;
import java.nio.file.Paths;

def filePath = &quot;D:/Pradeep/POC_RUM/1 req.xml&quot;;
def fileContents = new String(Files.readAllBytes(Paths.get(filePath)), &apos;UTF-8&apos;);
log.info(&quot;File contents read successfully&quot;);
vars.put(&quot;content&quot;,fileContents);


def sess=System.getProperties().get(&quot;Session&quot;);
def destination=System.getProperties().get(&quot;${Destination}&quot;); //DQRAT01OQRAT
//def destination=&quot;DQRAT01OQRAT&quot;; //DQRAT01OQRAT
//log.info(&quot;Destination Queue is &quot;+destination);

def producer=sess.createProducer(destination);

def rnd=newRandom(System.currentTimeMillis());
def payload=vars.get(&quot;content&quot;);

def msg=sess.createTextMessage(payload);
def start=Instant.now();

producer.send(msg);
def stop=Instant.now();
producer.close();

SampleResult.setResponseData(msg.toString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);
SampleResult.setLatency(stop.toEpochMilli()-start.toEpochMilli());</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - refined" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.time.Instant;
import javax.jms.Session;
import javax.jms.MessageProducer;
import javax.jms.TextMessage;
import javax.jms.Queue;
import java.nio.file.Files;
import java.nio.file.Paths;

// Define the path to the XML file
def filePath = &quot;D:/Pradeep/POC_RUM/1 req.xml&quot;;

// Read the XML file contents
String fileContents;
try {
    fileContents = new String(Files.readAllBytes(Paths.get(filePath)), &apos;UTF-8&apos;);
    log.info(&quot;File contents read successfully&quot;);
} catch (IOException e) {
    log.error(&quot;Failed to read file: &quot; + e.getMessage());
    throw new RuntimeException(&quot;Error reading file contents.&quot;, e);
}

// Store the file contents in a JMeter variable
vars.put(&quot;content&quot;, fileContents);

// Retrieve the JMS session from JMeter context
def sess = vars.get(&quot;JMS_SESSION&quot;); // Adjust the variable name as necessary

if (sess == null) {
    log.error(&quot;Session is not set in the properties.&quot;);
    throw new IllegalStateException(&quot;JMS Session is not initialized.&quot;);
}

// Retrieve the destination queue name from JMeter variables
def destinationQueueName = vars.get(&quot;Destination&quot;);
if (destinationQueueName == null || destinationQueueName.isEmpty()) {
    log.error(&quot;Destination queue name is not set.&quot;);
    throw new IllegalStateException(&quot;Destination queue name is not set.&quot;);
}

// Log the destination queue name for debugging
log.info(&quot;Destination Queue is: &quot; + destinationQueueName);

// Create the destination queue object
Queue destination = sess.createQueue(destinationQueueName);

// Create a message producer for the destination queue
MessageProducer producer = sess.createProducer(destination);

// Get the message payload from the JMeter variable
def payload = vars.get(&quot;content&quot;);

// Create a text message with the payload
TextMessage msg = sess.createTextMessage(payload);
def start = Instant.now(); // Start timing the send operation

// Send the message to the queue
producer.send(msg);
log.info(&quot;Message sent successfully to the queue: &quot; + destinationQueueName);

def stop = Instant.now(); // Stop timing the send operation
producer.close(); // Close the producer

// Set response data for JMeter result
SampleResult.setResponseData(msg.getText(), &quot;UTF-8&quot;);
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);
SampleResult.setLatency(stop.toEpochMilli() - start.toEpochMilli()); // Calculate latency
log.info(&quot;Message sent successfully with latency: &quot; + (stop.toEpochMilli() - start.toEpochMilli()) + &quot; ms&quot;);
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Copy" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueue
import com.ibm.mq.jms.MQQueueConnectionFactory
import javax.jms.Session

// Get the destination queue name from the system property
def destination = System.getProperties().get(&quot;Destination&quot;)

// Assuming you have set up other connection parameters earlier
MQQueueConnectionFactory factory = new MQQueueConnectionFactory();
factory.setHostName(&quot;awsdcmqdrat01.hertz.net&quot;);
factory.setPort(2025);
factory.setChannel(&quot;DQRAT01CCRTE&quot;);
factory.setQueueManager(&quot;AWSDCMQDRAT01&quot;);

// Establish the connection
def connection = factory.createQueueConnection();
def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);

// Set the destination (queue)
MQQueue queue = new MQQueue(${destination})  // Use the retrieved destination here

// Create a producer and send a message
def producer = session.createProducer(queue);
def message = session.createTextMessage(&quot;This is a test message&quot;);
producer.send(message);

log.info(&quot;Message sent to destination: ${destination}&quot;);
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Copy2" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.ibm.mq.jms.MQQueueConnectionFactory;
import javax.jms.Session;
import javax.jms.MessageProducer;
import javax.jms.TextMessage;
import javax.jms.Queue;
import java.time.Instant;

// Ensure MQ client libraries are available
log.info(&quot;Starting IBM MQ message producer script&quot;);

// Set up the MQ connection factory
MQQueueConnectionFactory factory = new MQQueueConnectionFactory();
factory.setHostName(&quot;awsdcmqdrat01.hertz.net&quot;);  // Replace with your MQ hostname
factory.setPort(2025);  					    // Replace with your MQ port (default is 1414)
factory.setChannel(&quot;DQRAT01CCRTE&quot;);  	         // Replace with your channel name
factory.setQueueManager(&quot;AWSDCMQDRAT01&quot;);        // Replace with your queue manager name

// Establish the connection and session
def connection = factory.createQueueConnection();
def session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);

// Start the connection
connection.start();

// Retrieve the destination queue from JMeter variables
def destinationQueueName = vars.get(&quot;Destination&quot;);    // Get the Destination variable from JMeter
if (destinationQueueName == null || destinationQueueName.isEmpty()) 
{
    throw new IllegalStateException(&quot;Destination queue name is not set&quot;);
}

// Create the destination queue object
Queue destination = session.createQueue(destinationQueueName);

// Create a message producer for the destination queue
MessageProducer producer = session.createProducer(destination);

// Load the XML file content
def filePath = &quot;D:/Pradeep/POC_RUM/1 req.xml&quot;;
def fileContents = new String(Files.readAllBytes(Paths.get(filePath)), &apos;UTF-8&apos;);
log.info(&quot;XML file contents loaded successfully&quot;);

// Create a text message with the file content (XML data)
TextMessage message = session.createTextMessage(fileContents);

// Measure the time for sending the message
def start = Instant.now();

// Send the message to the queue
producer.send(message);
log.info(&quot;Message sent successfully to the queue: &quot; + destinationQueueName);

// Stop timing and close the producer
def stop = Instant.now();
producer.close();
connection.close();

// Set response data for JMeter result
SampleResult.setResponseData(message.getText(), &quot;UTF-8&quot;);
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);
SampleResult.setLatency(stop.toEpochMilli() - start.toEpochMilli());
log.info(&quot;Message sent successfully with latency: &quot; + (stop.toEpochMilli() - start.toEpochMilli()) + &quot; ms&quot;);</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Consumer" enabled="false">
        <stringProp name="ThreadGroup.num_threads">${nrThreads}</stringProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <stringProp name="ThreadGroup.duration">${__jexl2(${duration}+10)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <stringProp name="throughput">${__jexl2(${sampleAtSecond}*60)}</stringProp>
          <intProp name="calcMode">2</intProp>
          <stringProp name="TestPlan.comments"> </stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">  </stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import javax.jms.TextMessage;
import javax.jms.BytesMessage;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.Instant;
import java.time.format.DateTimeFormatter;

def sess=System.getProperties().get(&quot;Session&quot;);
def destination=System.getProperties().get(&quot;Destination&quot;);
def consumer=sess.createConsumer(destination);
def start=Instant.now();
def msg=consumer.receive(1000);
def stop=Instant.now();

if(msg!=null){
   if(msginstanceofBytesMessage)
  	 {
	   	def tmp=msg.asType(BytesMessage);
	   	log.debug(&quot;#### Incoming BytesMessage contains &quot;+ tmp.getBodyLength()+&quot; bytes&quot;);
  	 }
else if(msginstanceofTextMessage);
	{
	def tmp=msg.asType(TextMessage);
	log.debug(&quot;#### Incoming TextMessage contains -&gt; &quot;+ tmp.getText());
	}
else
	log.debug(&quot;#### Incoming message has unexpected format!&quot;);
	LocalDatedate=LocalDate.parse(msg.getStringProperty(&quot;JMS_IBM_PutDate&quot;),DateTimeFormatter.ofPattern(&quot;uuuuMMdd&quot;));
	LocalTimetime=LocalTime.parse(msg.getStringProperty(&quot;JMS_IBM_PutTime&quot;),DateTimeFormatter.ofPattern(&quot;HHmmssSS&quot;));
	def timestampDetail=String.format(&quot;#### Incoming message was placed in queue @ %s - %s&quot;,date,time);
	log.info(timestampDetail);
	SampleResult.setResponseData(msg.toString()+&quot;\n\n&quot;+timestampDetail);
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);
	SampleResult.setLatency(stop.toEpochMilli()-start.toEpochMilli());
	}
else{
	log.info(&quot;#### Nothing to fetch!&quot;);
	}
consumer.close();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
